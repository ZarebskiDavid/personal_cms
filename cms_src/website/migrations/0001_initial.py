# Generated by Django 2.2.6 on 2019-10-21 19:46

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('slug', models.SlugField(blank=True, max_length=100)),
                ('rating', models.PositiveSmallIntegerField(default=0, editable=False)),
                ('nb_views', models.PositiveIntegerField(default=0, editable=False)),
                ('tags', models.CharField(help_text='comma separated tags', max_length=100)),
                ('family_friendly', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True, help_text='markdown syntax', max_length=300, null=True)),
                ('first_published', models.DateField(auto_now_add=True)),
                ('last_update', models.DateField(verbose_name='date published')),
                ('visible', models.BooleanField(default=True)),
                ('content', models.TextField(help_text='markdown syntax. You can enable syntax highlighting in your fenced code by adding the typical extention of the language (e.g. ```py for python syntax)')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='article_photo')),
                ('language', models.CharField(choices=[('fr', 'French'), ('en', 'English'), ('es', 'Spanish')], default='en', max_length=2)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Article_category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('path', models.CharField(default='', editable=False, max_length=50)),
                ('count', models.PositiveSmallIntegerField(default=0, editable=False)),
            ],
            options={
                'verbose_name_plural': 'article_categories',
            },
        ),
        migrations.CreateModel(
            name='Certification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2019)])),
                ('title', models.CharField(max_length=100)),
                ('institution', models.CharField(max_length=100)),
                ('link', models.URLField(blank=True, null=True)),
                ('details', models.TextField(blank=True, help_text='Use a Markdown syntax', null=True)),
                ('expire', models.DateField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-year'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('content', models.TextField(help_text='markdown syntax', max_length=300)),
                ('author', models.CharField(max_length=100)),
                ('rating', models.PositiveSmallIntegerField(default=0, editable=False)),
            ],
        ),
        migrations.CreateModel(
            name='Diplome',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2019)])),
                ('title', models.CharField(max_length=100)),
                ('institution', models.CharField(max_length=100)),
                ('link', models.URLField(blank=True, null=True)),
                ('details', models.TextField(blank=True, help_text='Use a Markdown syntax', null=True)),
            ],
            options={
                'verbose_name_plural': 'diploma',
            },
        ),
        migrations.CreateModel(
            name='ExternalAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plateform_name', models.CharField(max_length=60)),
                ('url', models.URLField()),
                ('logo', models.ImageField(upload_to='logo')),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2019)])),
                ('title', models.CharField(max_length=100)),
                ('institution', models.CharField(max_length=100)),
                ('link', models.URLField(blank=True, null=True)),
                ('details', models.TextField(blank=True, help_text='Use a Markdown syntax', null=True)),
                ('duration', models.DurationField()),
                ('job_type', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['-year'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('author', models.CharField(max_length=100)),
                ('mail', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=120)),
                ('content', models.TextField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='first name OR pseudo', max_length=50)),
                ('last_name', models.CharField(blank=True, max_length=50, null=True)),
                ('url', models.URLField(blank=True, null=True, unique=True)),
                ('town', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'ordering': ['first_name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('url', models.URLField()),
                ('description', models.TextField(help_text='markdown syntax')),
                ('image_url', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SiteSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='my_site_title', max_length=100)),
                ('about', models.TextField(blank=True, null=True)),
                ('keywords', models.CharField(help_text='comma separated tags', max_length=120, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('profil_image', models.ImageField(default='photo/profile_placeholder.png', null=True, upload_to='photo')),
                ('owner_first_name', models.CharField(default='my_first_name', max_length=100)),
                ('owner_last_name', models.CharField(default='my_last_name', max_length=100)),
                ('bio', models.TextField(blank=True, help_text='markdown syntax', max_length=800, null=True)),
                ('display_bio', models.BooleanField(default=False)),
                ('display_skills', models.BooleanField(default=False)),
                ('display_carousel', models.BooleanField(default=False)),
                ('footer', models.TextField(blank=True, help_text='markdown syntax', max_length=200, null=True)),
                ('gallery_width', models.PositiveSmallIntegerField(default=3, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(5)])),
                ('nb_page_gallery', models.PositiveSmallIntegerField(default=8, help_text='number of items by gallery page', validators=[django.core.validators.MinValueValidator(4), django.core.validators.MaxValueValidator(30)])),
                ('show_gallery', models.BooleanField(default=False)),
                ('show_articles', models.BooleanField(default=False)),
                ('show_projects', models.BooleanField(default=False)),
                ('show_education', models.BooleanField(default=False)),
                ('show_jobs', models.BooleanField(default=False)),
                ('show_certifications', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('mastery', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
            ],
        ),
        migrations.CreateModel(
            name='UserDesign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='default', max_length=255)),
                ('code', models.TextField(default='body {\n  background-color: #393e3f;\n  background-image: url("https://www.transparenttextures.com/patterns/black-orchid.png");\n/* This is mostly intended for prototyping; please download the pattern and re-host for production environments. Thank you! */\n  color: #edeeef;\n  font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", sans-serif;\n  font-size: .9rem;\n}\n\n/*sidebar*/\n.off-canvas .off-canvas-sidebar {\n  background: #d4d6d4;\n  color: #383838;\n}\n\n/*cards*/\n.card {\n  background: #fff;\n  border: .05rem solid #dadee4;\n  color: #303030;\n}\n\n/*buttons*/\n.btn {\n  border: .05rem solid #08b225;\n  color: #08b225;\n}\n\n.btn:hover {\n  background: #38d152;\n  color: #effff2;\n}\n\n.btn.btn-primary {\n  background: #03b221;\n}\n\n.btn.btn-primary:focus,\n.btn.btn-primary:hover {\n  background: #35cc4f;\n}\n\n.btn.btn-primary:active,\n.btn.btn-primary.active {\n  background: #fc7532;\n}\n\n/*links*/\na {\n  color: #218432;\n}\n\na:focus {\n  box-shadow: 0 0 0 .1rem rgba(33, 120, 50,.2);\n}\n\na:focus,\na:hover,\na:active,\na.active {\n  color: #2db544;\n}\n\na:visited {\n  color: #48af59;\n}\n\n/*menu item*/\n.menu {\n  background: #fff;\n  box-shadow: 0 .05rem .2rem rgba(48, 55, 66, .3);\n}\n\n.menu .menu-item > a {\n  color: inherit;\n}\n\n.menu .menu-item > a:focus,\n.menu .menu-item > a:hover {\n  background: #72e586;\n  color: #0f0b09;\n}\n\n.menu .menu-item > a:active,\n.menu .menu-item > a.active {\n  background: #84ed96;\n  color: #ff6b11;\n}\n\n/*forms*/\n.form-input {\n  background: #f4f4f4;\n  border: .05rem solid #938882;\n  border-radius: .1rem;\n  color: #3b4351;\n}\n\n.form-input:focus {\n  border-color: #38d152; \n  box-shadow: 0 0 0 .1rem rgba(87, 85, 217, .2);\n}\n\n.form-select {\n  background: #fff; \n  border: .05rem solid #938882;\n}\n\n.form-select:focus {\n  border-color: #38d152; \n  box-shadow: 0 0 0 .1rem rgba(87, 85, 217, .2);\n}\n\n/*pagination*/\n.pagination .page-item a:focus,\n.pagination .page-item a:hover {\n  color: #38d152;\n}\n.pagination .page-item.active a {\n  background: #08b225;\n  color: #fff;\n}\n')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Photo_category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('path', models.CharField(default='', editable=False, max_length=50)),
                ('count', models.PositiveSmallIntegerField(default=0, editable=False)),
                ('visible_as_gallery', models.BooleanField(default=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nested_category', to='website.Photo_category')),
            ],
            options={
                'verbose_name_plural': 'photo_categories',
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('slug', models.SlugField(blank=True, max_length=100)),
                ('rating', models.PositiveSmallIntegerField(default=0, editable=False)),
                ('nb_views', models.PositiveIntegerField(default=0, editable=False)),
                ('tags', models.CharField(help_text='comma separated tags', max_length=100)),
                ('family_friendly', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True, help_text='markdown syntax', max_length=300, null=True)),
                ('first_published', models.DateField(auto_now_add=True)),
                ('place_name', models.CharField(blank=True, max_length=100, null=True)),
                ('buy_link', models.URLField(blank=True, null=True)),
                ('photo', models.ImageField(upload_to='photo')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='website.Person')),
                ('categories', models.ManyToManyField(to='website.Photo_category')),
                ('photo_models', models.ManyToManyField(blank=True, related_name='models', to='website.Person')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='person',
            constraint=models.UniqueConstraint(fields=('first_name', 'last_name'), name='unique_person'),
        ),
        migrations.AddField(
            model_name='comment',
            name='article',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='website.Article'),
        ),
        migrations.AddField(
            model_name='comment',
            name='parent',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='nested_comment', to='website.Comment'),
        ),
        migrations.AddField(
            model_name='article_category',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='nested_category', to='website.Article_category'),
        ),
        migrations.AddField(
            model_name='article',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='website.Person'),
        ),
        migrations.AddField(
            model_name='article',
            name='categories',
            field=models.ManyToManyField(to='website.Article_category'),
        ),
        migrations.AddConstraint(
            model_name='photo_category',
            constraint=models.UniqueConstraint(fields=('parent', 'name'), name='unique_photo'),
        ),
        migrations.AddIndex(
            model_name='photo',
            index=models.Index(fields=['slug', 'nb_views', 'rating'], name='website_pho_slug_f1ecad_idx'),
        ),
        migrations.AddConstraint(
            model_name='photo',
            constraint=models.UniqueConstraint(fields=('title',), name='unique_post'),
        ),
        migrations.AddConstraint(
            model_name='article_category',
            constraint=models.UniqueConstraint(fields=('parent', 'name'), name='unique_article'),
        ),
        migrations.AddIndex(
            model_name='article',
            index=models.Index(fields=['slug', 'nb_views', 'rating'], name='website_art_slug_561676_idx'),
        ),
        migrations.AddConstraint(
            model_name='article',
            constraint=models.UniqueConstraint(fields=('title',), name='unique_post'),
        ),
    ]
